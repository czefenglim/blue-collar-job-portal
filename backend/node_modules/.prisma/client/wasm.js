
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  fullName: 'fullName',
  phoneNumber: 'phoneNumber',
  isEmailVerified: 'isEmailVerified',
  isPhoneVerified: 'isPhoneVerified',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  nationality: 'nationality',
  address: 'address',
  city: 'city',
  state: 'state',
  postcode: 'postcode',
  profilePicture: 'profilePicture',
  preferredSalaryMin: 'preferredSalaryMin',
  preferredSalaryMax: 'preferredSalaryMax',
  availableFrom: 'availableFrom',
  workingHours: 'workingHours',
  transportMode: 'transportMode',
  maxTravelDistance: 'maxTravelDistance',
  experienceYears: 'experienceYears',
  certifications: 'certifications',
  resumeUrl: 'resumeUrl',
  profileCompleted: 'profileCompleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.UserSkillScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  skillId: 'skillId'
};

exports.Prisma.LanguageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.UserLanguageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  languageId: 'languageId'
};

exports.Prisma.IndustryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  icon: 'icon',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.UserIndustryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  industryId: 'industryId'
};

exports.Prisma.ResumeQuestionScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  question: 'question',
  type: 'type',
  options: 'options',
  required: 'required',
  conditionalOn: 'conditionalOn',
  conditionalValue: 'conditionalValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResumeAnswerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionId: 'questionId',
  answer: 'answer',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  logo: 'logo',
  website: 'website',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  postcode: 'postcode',
  companySize: 'companySize',
  isVerified: 'isVerified',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  requirements: 'requirements',
  benefits: 'benefits',
  industryId: 'industryId',
  companyId: 'companyId',
  jobType: 'jobType',
  workingHours: 'workingHours',
  experienceLevel: 'experienceLevel',
  address: 'address',
  city: 'city',
  state: 'state',
  postcode: 'postcode',
  isRemote: 'isRemote',
  salaryMin: 'salaryMin',
  salaryMax: 'salaryMax',
  salaryType: 'salaryType',
  isActive: 'isActive',
  isFeatured: 'isFeatured',
  applicationDeadline: 'applicationDeadline',
  startDate: 'startDate',
  viewCount: 'viewCount',
  applicationCount: 'applicationCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobApplicationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jobId: 'jobId',
  status: 'status',
  coverLetter: 'coverLetter',
  resumeUrl: 'resumeUrl',
  appliedAt: 'appliedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SavedJobScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jobId: 'jobId',
  savedAt: 'savedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  actionUrl: 'actionUrl',
  createdAt: 'createdAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyId: 'companyId',
  rating: 'rating',
  title: 'title',
  comment: 'comment',
  isAnonymous: 'isAnonymous',
  isApproved: 'isApproved',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  password: 'password',
  fullName: 'fullName',
  phoneNumber: 'phoneNumber'
};

exports.Prisma.UserProfileOrderByRelevanceFieldEnum = {
  nationality: 'nationality',
  address: 'address',
  city: 'city',
  state: 'state',
  postcode: 'postcode',
  profilePicture: 'profilePicture',
  certifications: 'certifications',
  resumeUrl: 'resumeUrl'
};

exports.Prisma.SkillOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.LanguageOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.IndustryOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug',
  icon: 'icon',
  description: 'description'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.ResumeQuestionOrderByRelevanceFieldEnum = {
  questionId: 'questionId',
  question: 'question',
  type: 'type',
  conditionalOn: 'conditionalOn',
  conditionalValue: 'conditionalValue'
};

exports.Prisma.ResumeAnswerOrderByRelevanceFieldEnum = {
  questionId: 'questionId'
};

exports.Prisma.CompanyOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug',
  description: 'description',
  logo: 'logo',
  website: 'website',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  postcode: 'postcode'
};

exports.Prisma.JobOrderByRelevanceFieldEnum = {
  title: 'title',
  slug: 'slug',
  description: 'description',
  requirements: 'requirements',
  benefits: 'benefits',
  address: 'address',
  city: 'city',
  state: 'state',
  postcode: 'postcode'
};

exports.Prisma.JobApplicationOrderByRelevanceFieldEnum = {
  coverLetter: 'coverLetter',
  resumeUrl: 'resumeUrl'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  title: 'title',
  message: 'message',
  actionUrl: 'actionUrl'
};

exports.Prisma.ReviewOrderByRelevanceFieldEnum = {
  title: 'title',
  comment: 'comment'
};
exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

exports.JobType = exports.$Enums.JobType = {
  FULL_TIME: 'FULL_TIME',
  PART_TIME: 'PART_TIME',
  CONTRACT: 'CONTRACT',
  TEMPORARY: 'TEMPORARY',
  FREELANCE: 'FREELANCE'
};

exports.WorkingHours = exports.$Enums.WorkingHours = {
  DAY_SHIFT: 'DAY_SHIFT',
  NIGHT_SHIFT: 'NIGHT_SHIFT',
  ROTATING_SHIFT: 'ROTATING_SHIFT',
  FLEXIBLE: 'FLEXIBLE',
  WEEKEND_ONLY: 'WEEKEND_ONLY'
};

exports.ExperienceLevel = exports.$Enums.ExperienceLevel = {
  ENTRY_LEVEL: 'ENTRY_LEVEL',
  JUNIOR: 'JUNIOR',
  MID_LEVEL: 'MID_LEVEL',
  SENIOR: 'SENIOR',
  EXPERT: 'EXPERT'
};

exports.SalaryType = exports.$Enums.SalaryType = {
  HOURLY: 'HOURLY',
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY',
  PER_PROJECT: 'PER_PROJECT'
};

exports.ApplicationStatus = exports.$Enums.ApplicationStatus = {
  PENDING: 'PENDING',
  REVIEWING: 'REVIEWING',
  SHORTLISTED: 'SHORTLISTED',
  INTERVIEW_SCHEDULED: 'INTERVIEW_SCHEDULED',
  INTERVIEWED: 'INTERVIEWED',
  REJECTED: 'REJECTED',
  HIRED: 'HIRED',
  WITHDRAWN: 'WITHDRAWN'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  JOB_MATCH: 'JOB_MATCH',
  APPLICATION_UPDATE: 'APPLICATION_UPDATE',
  NEW_MESSAGE: 'NEW_MESSAGE',
  PROFILE_UPDATE: 'PROFILE_UPDATE',
  SYSTEM_UPDATE: 'SYSTEM_UPDATE'
};

exports.TransportMode = exports.$Enums.TransportMode = {
  OWN_VEHICLE: 'OWN_VEHICLE',
  PUBLIC_TRANSPORT: 'PUBLIC_TRANSPORT',
  COMPANY_TRANSPORT: 'COMPANY_TRANSPORT',
  MOTORCYCLE: 'MOTORCYCLE',
  BICYCLE: 'BICYCLE',
  WALKING: 'WALKING'
};

exports.CompanySize = exports.$Enums.CompanySize = {
  STARTUP: 'STARTUP',
  SMALL: 'SMALL',
  MEDIUM: 'MEDIUM',
  LARGE: 'LARGE',
  ENTERPRISE: 'ENTERPRISE'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserProfile: 'UserProfile',
  Skill: 'Skill',
  UserSkill: 'UserSkill',
  Language: 'Language',
  UserLanguage: 'UserLanguage',
  Industry: 'Industry',
  UserIndustry: 'UserIndustry',
  ResumeQuestion: 'ResumeQuestion',
  ResumeAnswer: 'ResumeAnswer',
  Company: 'Company',
  Job: 'Job',
  JobApplication: 'JobApplication',
  SavedJob: 'SavedJob',
  Notification: 'Notification',
  Review: 'Review'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "C:\\Users\\czefe\\blue-collar-job-portal\\backend\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "C:\\Users\\czefe\\blue-collar-job-portal\\backend\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mysql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// User Management\nmodel User {\n  id              Int       @id @default(autoincrement())\n  email           String    @unique\n  password        String\n  fullName        String\n  phoneNumber     String?\n  isEmailVerified Boolean   @default(false)\n  isPhoneVerified Boolean   @default(false)\n  isActive        Boolean   @default(true)\n  lastLoginAt     DateTime?\n  createdAt       DateTime  @default(now())\n  updatedAt       DateTime  @updatedAt\n\n  // Relations\n  profile       UserProfile?\n  applications  JobApplication[]\n  notifications Notification[]\n  reviews       Review[]\n  resumeAnswers ResumeAnswer[]\n  savedJobs     SavedJob[]\n\n  @@map(\"users\")\n}\n\n// In your schema.prisma file, update the UserProfile model:\nmodel UserProfile {\n  id     Int @id @default(autoincrement())\n  userId Int @unique\n\n  // Personal Information\n  dateOfBirth    DateTime?\n  gender         Gender?\n  nationality    String?\n  address        String?\n  city           String?\n  state          String?\n  postcode       String?\n  profilePicture String?   @db.Text // Change to TEXT to store longer strings\n\n  // Job Preferences\n  preferredSalaryMin Int?\n  preferredSalaryMax Int?\n  availableFrom      DateTime?\n  workingHours       WorkingHours?\n  transportMode      TransportMode?\n  maxTravelDistance  Int? // in kilometers\n\n  // Skills and Experience\n  experienceYears Int     @default(0)\n  certifications  String? // JSON array of certifications\n\n  // Resume\n  resumeUrl String?\n\n  // Profile completion\n  profileCompleted Boolean @default(false)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relations\n  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)\n  industries UserIndustry[]\n  skills     UserSkill[]\n  languages  UserLanguage[]\n\n  @@map(\"user_profiles\")\n}\n\n// ========================\n// Skills & Languages\n// ========================\nmodel Skill {\n  id        Int         @id @default(autoincrement())\n  name      String      @unique\n  isActive  Boolean     @default(true)\n  createdAt DateTime    @default(now())\n  users     UserSkill[]\n}\n\nmodel UserSkill {\n  id      Int @id @default(autoincrement())\n  userId  Int\n  skillId Int\n\n  // Relations\n  user  UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)\n  skill Skill       @relation(fields: [skillId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, skillId])\n  @@map(\"user_skills\")\n}\n\nmodel Language {\n  id        Int            @id @default(autoincrement())\n  name      String         @unique\n  isActive  Boolean        @default(true)\n  createdAt DateTime       @default(now())\n  users     UserLanguage[]\n}\n\nmodel UserLanguage {\n  id         Int @id @default(autoincrement())\n  userId     Int\n  languageId Int\n\n  // Relations\n  user     UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)\n  language Language    @relation(fields: [languageId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, languageId])\n  @@map(\"user_languages\")\n}\n\n// Industries that users are interested in (from onboarding)\nmodel Industry {\n  id          Int      @id @default(autoincrement())\n  name        String   @unique\n  slug        String   @unique\n  icon        String?\n  description String?\n  isActive    Boolean  @default(true)\n  createdAt   DateTime @default(now())\n\n  // Relations\n  users UserIndustry[]\n  jobs  Job[]\n\n  @@map(\"industries\")\n}\n\n// Many-to-many relationship between users and industries\nmodel UserIndustry {\n  id         Int @id @default(autoincrement())\n  userId     Int\n  industryId Int\n\n  // Relations\n  user     UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade)\n  industry Industry    @relation(fields: [industryId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, industryId])\n  @@map(\"user_industries\")\n}\n\nmodel ResumeQuestion {\n  id               Int      @id @default(autoincrement())\n  questionId       String   @unique // e.g., \"hasWorkExperience\"\n  question         String\n  type             String // \"select\", \"multiline\", \"multiselect\", \"file\"\n  options          Json? // store select/multiselect options\n  required         Boolean  @default(false)\n  conditionalOn    String? // if it depends on another answer\n  conditionalValue String? // value that triggers this question\n  createdAt        DateTime @default(now())\n  updatedAt        DateTime @updatedAt\n\n  // Relations\n  answers ResumeAnswer[]\n}\n\nmodel ResumeAnswer {\n  id         Int      @id @default(autoincrement())\n  userId     Int\n  questionId String // FK to ResumeQuestion.questionId\n  answer     Json\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n\n  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)\n  question ResumeQuestion? @relation(fields: [questionId], references: [questionId])\n\n  @@unique([userId, questionId])\n  @@map(\"resume_answers\")\n}\n\n// Employers/Companies\nmodel Company {\n  id          Int          @id @default(autoincrement())\n  name        String\n  slug        String       @unique\n  description String?\n  logo        String?\n  website     String?\n  email       String?\n  phone       String?\n  address     String?\n  city        String?\n  state       String?\n  postcode    String?\n  companySize CompanySize?\n  isVerified  Boolean      @default(false)\n  isActive    Boolean      @default(true)\n  createdAt   DateTime     @default(now())\n  updatedAt   DateTime     @updatedAt\n\n  // Relations\n  jobs Job[]\n\n  @@map(\"companies\")\n}\n\n// Job Postings\nmodel Job {\n  id           Int     @id @default(autoincrement())\n  title        String\n  slug         String  @unique\n  description  String  @db.Text\n  requirements String? @db.Text\n  benefits     String? @db.Text\n\n  // Job Details\n  industryId      Int\n  companyId       Int\n  jobType         JobType\n  workingHours    WorkingHours\n  experienceLevel ExperienceLevel\n\n  // Location\n  address  String?\n  city     String\n  state    String\n  postcode String?\n  isRemote Boolean @default(false)\n\n  // Salary\n  salaryMin  Int?\n  salaryMax  Int?\n  salaryType SalaryType?\n\n  // Job Status\n  isActive            Boolean   @default(true)\n  isFeatured          Boolean   @default(false)\n  applicationDeadline DateTime?\n  startDate           DateTime?\n\n  // SEO and Tracking\n  viewCount        Int @default(0)\n  applicationCount Int @default(0)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  // Relations\n  industry     Industry         @relation(fields: [industryId], references: [id])\n  company      Company          @relation(fields: [companyId], references: [id])\n  applications JobApplication[]\n  savedJobs    SavedJob[]\n\n  @@map(\"jobs\")\n}\n\n// Job Applications\nmodel JobApplication {\n  id          Int               @id @default(autoincrement())\n  userId      Int\n  jobId       Int\n  status      ApplicationStatus @default(PENDING)\n  coverLetter String?           @db.Text\n  resumeUrl   String?\n  appliedAt   DateTime          @default(now())\n  updatedAt   DateTime          @updatedAt\n\n  // Relations\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, jobId])\n  @@map(\"job_applications\")\n}\n\n// Saved Jobs\nmodel SavedJob {\n  id      Int      @id @default(autoincrement())\n  userId  Int\n  jobId   Int\n  savedAt DateTime @default(now())\n\n  // Relations\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, jobId])\n  @@map(\"saved_jobs\")\n}\n\n// Notifications\nmodel Notification {\n  id        Int              @id @default(autoincrement())\n  userId    Int\n  title     String\n  message   String           @db.Text\n  type      NotificationType\n  isRead    Boolean          @default(false)\n  actionUrl String?\n  createdAt DateTime         @default(now())\n\n  // Relations\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"notifications\")\n}\n\n// Company/Job Reviews\nmodel Review {\n  id          Int      @id @default(autoincrement())\n  userId      Int\n  companyId   Int?\n  rating      Int // 1-5 stars\n  title       String?\n  comment     String?  @db.Text\n  isAnonymous Boolean  @default(false)\n  isApproved  Boolean  @default(false)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  // Relations\n  user User @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@map(\"reviews\")\n}\n\n// Enums\nenum Gender {\n  MALE\n  FEMALE\n  OTHER\n  PREFER_NOT_TO_SAY\n}\n\nenum JobType {\n  FULL_TIME\n  PART_TIME\n  CONTRACT\n  TEMPORARY\n  FREELANCE\n}\n\nenum WorkingHours {\n  DAY_SHIFT\n  NIGHT_SHIFT\n  ROTATING_SHIFT\n  FLEXIBLE\n  WEEKEND_ONLY\n}\n\nenum ExperienceLevel {\n  ENTRY_LEVEL\n  JUNIOR\n  MID_LEVEL\n  SENIOR\n  EXPERT\n}\n\nenum SalaryType {\n  HOURLY\n  DAILY\n  WEEKLY\n  MONTHLY\n  YEARLY\n  PER_PROJECT\n}\n\nenum ApplicationStatus {\n  PENDING\n  REVIEWING\n  SHORTLISTED\n  INTERVIEW_SCHEDULED\n  INTERVIEWED\n  REJECTED\n  HIRED\n  WITHDRAWN\n}\n\nenum NotificationType {\n  JOB_MATCH\n  APPLICATION_UPDATE\n  NEW_MESSAGE\n  PROFILE_UPDATE\n  SYSTEM_UPDATE\n}\n\nenum TransportMode {\n  OWN_VEHICLE\n  PUBLIC_TRANSPORT\n  COMPANY_TRANSPORT\n  MOTORCYCLE\n  BICYCLE\n  WALKING\n}\n\nenum CompanySize {\n  STARTUP // 1-10 employees\n  SMALL // 11-50 employees\n  MEDIUM // 51-200 employees\n  LARGE // 201-1000 employees\n  ENTERPRISE // 1000+ employees\n}\n",
  "inlineSchemaHash": "db7518a3122783729c6f9b4223322b9d6c7ec2e9ebffec5bb51cf361b4af2797",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"fullName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phoneNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isEmailVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isPhoneVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastLoginAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"UserProfile\",\"relationName\":\"UserToUserProfile\"},{\"name\":\"applications\",\"kind\":\"object\",\"type\":\"JobApplication\",\"relationName\":\"JobApplicationToUser\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationToUser\"},{\"name\":\"reviews\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"ReviewToUser\"},{\"name\":\"resumeAnswers\",\"kind\":\"object\",\"type\":\"ResumeAnswer\",\"relationName\":\"ResumeAnswerToUser\"},{\"name\":\"savedJobs\",\"kind\":\"object\",\"type\":\"SavedJob\",\"relationName\":\"SavedJobToUser\"}],\"dbName\":\"users\"},\"UserProfile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"dateOfBirth\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"gender\",\"kind\":\"enum\",\"type\":\"Gender\"},{\"name\":\"nationality\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"postcode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profilePicture\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"preferredSalaryMin\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"preferredSalaryMax\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"availableFrom\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"workingHours\",\"kind\":\"enum\",\"type\":\"WorkingHours\"},{\"name\":\"transportMode\",\"kind\":\"enum\",\"type\":\"TransportMode\"},{\"name\":\"maxTravelDistance\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"experienceYears\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"certifications\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resumeUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"profileCompleted\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserProfile\"},{\"name\":\"industries\",\"kind\":\"object\",\"type\":\"UserIndustry\",\"relationName\":\"UserIndustryToUserProfile\"},{\"name\":\"skills\",\"kind\":\"object\",\"type\":\"UserSkill\",\"relationName\":\"UserProfileToUserSkill\"},{\"name\":\"languages\",\"kind\":\"object\",\"type\":\"UserLanguage\",\"relationName\":\"UserLanguageToUserProfile\"}],\"dbName\":\"user_profiles\"},\"Skill\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"UserSkill\",\"relationName\":\"SkillToUserSkill\"}],\"dbName\":null},\"UserSkill\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"skillId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"UserProfile\",\"relationName\":\"UserProfileToUserSkill\"},{\"name\":\"skill\",\"kind\":\"object\",\"type\":\"Skill\",\"relationName\":\"SkillToUserSkill\"}],\"dbName\":\"user_skills\"},\"Language\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"UserLanguage\",\"relationName\":\"LanguageToUserLanguage\"}],\"dbName\":null},\"UserLanguage\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"languageId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"UserProfile\",\"relationName\":\"UserLanguageToUserProfile\"},{\"name\":\"language\",\"kind\":\"object\",\"type\":\"Language\",\"relationName\":\"LanguageToUserLanguage\"}],\"dbName\":\"user_languages\"},\"Industry\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"icon\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"UserIndustry\",\"relationName\":\"IndustryToUserIndustry\"},{\"name\":\"jobs\",\"kind\":\"object\",\"type\":\"Job\",\"relationName\":\"IndustryToJob\"}],\"dbName\":\"industries\"},\"UserIndustry\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"industryId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"UserProfile\",\"relationName\":\"UserIndustryToUserProfile\"},{\"name\":\"industry\",\"kind\":\"object\",\"type\":\"Industry\",\"relationName\":\"IndustryToUserIndustry\"}],\"dbName\":\"user_industries\"},\"ResumeQuestion\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"questionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"question\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"options\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"required\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"conditionalOn\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"conditionalValue\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"answers\",\"kind\":\"object\",\"type\":\"ResumeAnswer\",\"relationName\":\"ResumeAnswerToResumeQuestion\"}],\"dbName\":null},\"ResumeAnswer\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"questionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"answer\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ResumeAnswerToUser\"},{\"name\":\"question\",\"kind\":\"object\",\"type\":\"ResumeQuestion\",\"relationName\":\"ResumeAnswerToResumeQuestion\"}],\"dbName\":\"resume_answers\"},\"Company\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"logo\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"website\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"postcode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"companySize\",\"kind\":\"enum\",\"type\":\"CompanySize\"},{\"name\":\"isVerified\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"jobs\",\"kind\":\"object\",\"type\":\"Job\",\"relationName\":\"CompanyToJob\"}],\"dbName\":\"companies\"},\"Job\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slug\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"requirements\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"benefits\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"industryId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"companyId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"jobType\",\"kind\":\"enum\",\"type\":\"JobType\"},{\"name\":\"workingHours\",\"kind\":\"enum\",\"type\":\"WorkingHours\"},{\"name\":\"experienceLevel\",\"kind\":\"enum\",\"type\":\"ExperienceLevel\"},{\"name\":\"address\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"city\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"postcode\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isRemote\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"salaryMin\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"salaryMax\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"salaryType\",\"kind\":\"enum\",\"type\":\"SalaryType\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isFeatured\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"applicationDeadline\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"viewCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"applicationCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"industry\",\"kind\":\"object\",\"type\":\"Industry\",\"relationName\":\"IndustryToJob\"},{\"name\":\"company\",\"kind\":\"object\",\"type\":\"Company\",\"relationName\":\"CompanyToJob\"},{\"name\":\"applications\",\"kind\":\"object\",\"type\":\"JobApplication\",\"relationName\":\"JobToJobApplication\"},{\"name\":\"savedJobs\",\"kind\":\"object\",\"type\":\"SavedJob\",\"relationName\":\"JobToSavedJob\"}],\"dbName\":\"jobs\"},\"JobApplication\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"jobId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"ApplicationStatus\"},{\"name\":\"coverLetter\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"resumeUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"appliedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"JobApplicationToUser\"},{\"name\":\"job\",\"kind\":\"object\",\"type\":\"Job\",\"relationName\":\"JobToJobApplication\"}],\"dbName\":\"job_applications\"},\"SavedJob\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"jobId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"savedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SavedJobToUser\"},{\"name\":\"job\",\"kind\":\"object\",\"type\":\"Job\",\"relationName\":\"JobToSavedJob\"}],\"dbName\":\"saved_jobs\"},\"Notification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"NotificationType\"},{\"name\":\"isRead\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"actionUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationToUser\"}],\"dbName\":\"notifications\"},\"Review\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"companyId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"comment\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isAnonymous\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"isApproved\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReviewToUser\"}],\"dbName\":\"reviews\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

