
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  fullName: 'fullName',
  phoneNumber: 'phoneNumber',
  isEmailVerified: 'isEmailVerified',
  isPhoneVerified: 'isPhoneVerified',
  isActive: 'isActive',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserProfileScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  dateOfBirth: 'dateOfBirth',
  gender: 'gender',
  nationality: 'nationality',
  address: 'address',
  city: 'city',
  state: 'state',
  postcode: 'postcode',
  profilePicture: 'profilePicture',
  preferredSalaryMin: 'preferredSalaryMin',
  preferredSalaryMax: 'preferredSalaryMax',
  availableFrom: 'availableFrom',
  workingHours: 'workingHours',
  transportMode: 'transportMode',
  maxTravelDistance: 'maxTravelDistance',
  experienceYears: 'experienceYears',
  certifications: 'certifications',
  resumeUrl: 'resumeUrl',
  profileCompleted: 'profileCompleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.UserSkillScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  skillId: 'skillId'
};

exports.Prisma.LanguageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.UserLanguageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  languageId: 'languageId'
};

exports.Prisma.IndustryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  icon: 'icon',
  description: 'description',
  isActive: 'isActive',
  createdAt: 'createdAt'
};

exports.Prisma.UserIndustryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  industryId: 'industryId'
};

exports.Prisma.ResumeQuestionScalarFieldEnum = {
  id: 'id',
  questionId: 'questionId',
  question: 'question',
  type: 'type',
  options: 'options',
  required: 'required',
  conditionalOn: 'conditionalOn',
  conditionalValue: 'conditionalValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ResumeAnswerScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  questionId: 'questionId',
  answer: 'answer',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  description: 'description',
  logo: 'logo',
  website: 'website',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  postcode: 'postcode',
  companySize: 'companySize',
  isVerified: 'isVerified',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  description: 'description',
  requirements: 'requirements',
  benefits: 'benefits',
  industryId: 'industryId',
  companyId: 'companyId',
  jobType: 'jobType',
  workingHours: 'workingHours',
  experienceLevel: 'experienceLevel',
  address: 'address',
  city: 'city',
  state: 'state',
  postcode: 'postcode',
  isRemote: 'isRemote',
  salaryMin: 'salaryMin',
  salaryMax: 'salaryMax',
  salaryType: 'salaryType',
  isActive: 'isActive',
  isFeatured: 'isFeatured',
  applicationDeadline: 'applicationDeadline',
  startDate: 'startDate',
  viewCount: 'viewCount',
  applicationCount: 'applicationCount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.JobApplicationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jobId: 'jobId',
  status: 'status',
  coverLetter: 'coverLetter',
  resumeUrl: 'resumeUrl',
  appliedAt: 'appliedAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SavedJobScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  jobId: 'jobId',
  savedAt: 'savedAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  actionUrl: 'actionUrl',
  createdAt: 'createdAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyId: 'companyId',
  rating: 'rating',
  title: 'title',
  comment: 'comment',
  isAnonymous: 'isAnonymous',
  isApproved: 'isApproved',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  email: 'email',
  password: 'password',
  fullName: 'fullName',
  phoneNumber: 'phoneNumber'
};

exports.Prisma.UserProfileOrderByRelevanceFieldEnum = {
  nationality: 'nationality',
  address: 'address',
  city: 'city',
  state: 'state',
  postcode: 'postcode',
  profilePicture: 'profilePicture',
  certifications: 'certifications',
  resumeUrl: 'resumeUrl'
};

exports.Prisma.SkillOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.LanguageOrderByRelevanceFieldEnum = {
  name: 'name'
};

exports.Prisma.IndustryOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug',
  icon: 'icon',
  description: 'description'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.ResumeQuestionOrderByRelevanceFieldEnum = {
  questionId: 'questionId',
  question: 'question',
  type: 'type',
  conditionalOn: 'conditionalOn',
  conditionalValue: 'conditionalValue'
};

exports.Prisma.ResumeAnswerOrderByRelevanceFieldEnum = {
  questionId: 'questionId'
};

exports.Prisma.CompanyOrderByRelevanceFieldEnum = {
  name: 'name',
  slug: 'slug',
  description: 'description',
  logo: 'logo',
  website: 'website',
  email: 'email',
  phone: 'phone',
  address: 'address',
  city: 'city',
  state: 'state',
  postcode: 'postcode'
};

exports.Prisma.JobOrderByRelevanceFieldEnum = {
  title: 'title',
  slug: 'slug',
  description: 'description',
  requirements: 'requirements',
  benefits: 'benefits',
  address: 'address',
  city: 'city',
  state: 'state',
  postcode: 'postcode'
};

exports.Prisma.JobApplicationOrderByRelevanceFieldEnum = {
  coverLetter: 'coverLetter',
  resumeUrl: 'resumeUrl'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  title: 'title',
  message: 'message',
  actionUrl: 'actionUrl'
};

exports.Prisma.ReviewOrderByRelevanceFieldEnum = {
  title: 'title',
  comment: 'comment'
};
exports.Gender = exports.$Enums.Gender = {
  MALE: 'MALE',
  FEMALE: 'FEMALE',
  OTHER: 'OTHER',
  PREFER_NOT_TO_SAY: 'PREFER_NOT_TO_SAY'
};

exports.WorkingHours = exports.$Enums.WorkingHours = {
  DAY_SHIFT: 'DAY_SHIFT',
  NIGHT_SHIFT: 'NIGHT_SHIFT',
  ROTATING_SHIFT: 'ROTATING_SHIFT',
  FLEXIBLE: 'FLEXIBLE',
  WEEKEND_ONLY: 'WEEKEND_ONLY'
};

exports.TransportMode = exports.$Enums.TransportMode = {
  OWN_VEHICLE: 'OWN_VEHICLE',
  PUBLIC_TRANSPORT: 'PUBLIC_TRANSPORT',
  COMPANY_TRANSPORT: 'COMPANY_TRANSPORT',
  MOTORCYCLE: 'MOTORCYCLE',
  BICYCLE: 'BICYCLE',
  WALKING: 'WALKING'
};

exports.CompanySize = exports.$Enums.CompanySize = {
  STARTUP: 'STARTUP',
  SMALL: 'SMALL',
  MEDIUM: 'MEDIUM',
  LARGE: 'LARGE',
  ENTERPRISE: 'ENTERPRISE'
};

exports.JobType = exports.$Enums.JobType = {
  FULL_TIME: 'FULL_TIME',
  PART_TIME: 'PART_TIME',
  CONTRACT: 'CONTRACT',
  TEMPORARY: 'TEMPORARY',
  FREELANCE: 'FREELANCE'
};

exports.ExperienceLevel = exports.$Enums.ExperienceLevel = {
  ENTRY_LEVEL: 'ENTRY_LEVEL',
  JUNIOR: 'JUNIOR',
  MID_LEVEL: 'MID_LEVEL',
  SENIOR: 'SENIOR',
  EXPERT: 'EXPERT'
};

exports.SalaryType = exports.$Enums.SalaryType = {
  HOURLY: 'HOURLY',
  DAILY: 'DAILY',
  WEEKLY: 'WEEKLY',
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY',
  PER_PROJECT: 'PER_PROJECT'
};

exports.ApplicationStatus = exports.$Enums.ApplicationStatus = {
  PENDING: 'PENDING',
  REVIEWING: 'REVIEWING',
  SHORTLISTED: 'SHORTLISTED',
  INTERVIEW_SCHEDULED: 'INTERVIEW_SCHEDULED',
  INTERVIEWED: 'INTERVIEWED',
  REJECTED: 'REJECTED',
  HIRED: 'HIRED',
  WITHDRAWN: 'WITHDRAWN'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  JOB_MATCH: 'JOB_MATCH',
  APPLICATION_UPDATE: 'APPLICATION_UPDATE',
  NEW_MESSAGE: 'NEW_MESSAGE',
  PROFILE_UPDATE: 'PROFILE_UPDATE',
  SYSTEM_UPDATE: 'SYSTEM_UPDATE'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserProfile: 'UserProfile',
  Skill: 'Skill',
  UserSkill: 'UserSkill',
  Language: 'Language',
  UserLanguage: 'UserLanguage',
  Industry: 'Industry',
  UserIndustry: 'UserIndustry',
  ResumeQuestion: 'ResumeQuestion',
  ResumeAnswer: 'ResumeAnswer',
  Company: 'Company',
  Job: 'Job',
  JobApplication: 'JobApplication',
  SavedJob: 'SavedJob',
  Notification: 'Notification',
  Review: 'Review'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
